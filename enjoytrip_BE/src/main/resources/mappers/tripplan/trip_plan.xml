<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.trip.domain.tripplan.repository.TripPlanDao">

    <select id="selectById" resultMap="tripPlanMap">
        <!-- trip plan 필드 -->
        SELECT tp.id AS tp_id, tp.created_at AS tp_created_at, tp.modified_at AS tp_modified_at, tp.deleted_at AS tp_deleted_at, tp.title AS tp_title, tp.description AS tp_description, tp.start_date AS tp_start_date, tp.end_date AS tp_end_date, tp.member_id AS tp_member_id, tp.like_count AS tp_like_count, tp.view_count AS tp_view_count,
        <!-- member (작성자) 필드 -->
        m.id AS m_id, m.name AS m_name, m.profile_image AS m_profile_image,
        <!-- trip plan day 필드 -->
        tpd.id AS tpd_id, tpd.date AS tpd_date, tpd.day_order AS tpd_day_order, tpd.trip_plan_id AS tpd_trip_plan_id,
        <!-- plan item 필드 -->
        pi.id AS pi_id, pi.description AS pi_description, pi.item_order AS pi_item_order, pi.item_type AS pi_item_type, pi.trip_plan_day_id AS pi_trip_plan_day_id, pi.attraction_id AS pi_attraction_id, pi.member_place_id AS pi_member_place_id,
        <!-- attraction / member place 필드 -->
        CASE
            WHEN a.id IS NOT NULL THEN a.title
            ELSE mp.name
        END AS pi_name,
        CASE
            WHEN a.id IS NOT NULL THEN a.image1
            ELSE mp.image
        END AS pi_image,
        CASE
            WHEN a.id IS NOT NULL THEN a.latitude
            ELSE mp.latitude
        END AS pi_latitude,
        CASE
            WHEN a.id IS NOT NULL THEN a.longitude
            ELSE mp.longitude
        END AS pi_longitude,
        CASE
            WHEN a.id IS NOT NULL THEN a.address1
            ELSE mp.address
        END AS pi_address,
        CASE
            WHEN a.id IS NOT NULL THEN a.like_count
            ELSE mp.like_count
        END AS pi_like_count,
        CASE
            WHEN a.id IS NOT NULL THEN a.overview
            ELSE mp.description
        END AS pi_description,
        CASE
            WHEN a.id IS NOT NULL THEN ac.category_id
            ELSE mc.category_id
        END AS pi_category_id,
        CASE
            WHEN a.id IS NOT NULL THEN ac.category_name
            ELSE mc.category_name
        END AS pi_category_name,
        <!-- route connection 필드 -->
        r.id AS r_id, r.from_item_id AS r_from_item_id, r.to_item_id AS r_to_item_id, r.distance AS r_distance, r.duration AS r_duration,
        <!-- trip style 필드 -->
        ts.style AS ts_style
        FROM trip_plan tp
		JOIN member m ON tp.member_id = m.id
		LEFT JOIN trip_plan_day tpd ON tp.id = tpd.trip_plan_id
        LEFT JOIN plan_item pi ON tpd.id = pi.trip_plan_day_id
        LEFT JOIN attraction a ON pi.attraction_id IS NOT NULL AND pi.attraction_id = a.id
        LEFT JOIN category ac ON pi.attraction_id IS NOT NULL AND a.category_id = ac.category_id
        LEFT JOIN member_place mp ON pi.member_place_id IS NOT NULL AND pi.member_place_id = mp.id
        LEFT JOIN category mc ON pi.member_place_id IS NOT NULL AND mp.category_id = mc.category_id
        LEFT JOIN trip_style ts ON tp.id = ts.trip_plan_id
        LEFT JOIN route_connection r ON r.from_item_id = (
		    SELECT p2.id
		    FROM plan_item p2
		    WHERE p2.trip_plan_day_id = pi.trip_plan_day_id
		      AND p2.item_order = pi.item_order - 1
		    LIMIT 1
		)
		WHERE tp.id = #{id}
        AND tp.deleted_at IS NULL;
    </select>

    <select id="selectSummaryById" resultMap="tripSummaryMap">
        SELECT id AS tp_id, created_at, modified_at, deleted_at, title, description, start_date, end_date, member_id, like_count
        FROM trip_plan
        WHERE id = #{id}
    </select>

    <select id="selectAll" resultMap="tripPlanMap">
        SELECT tp.id AS tp_id, tp.created_at AS tp_created_at, tp.modified_at AS tp_modified_at, tp.deleted_at AS deleted_at,
        tp.title AS tp_title, tp.description AS tp_description, tp.start_date AS tp_start_date, tp.end_date AS tp_end_date,
        tp.member_id AS tp_member_id, tp.like_count AS tp_like_count, tp.view_count AS tp_view_count,
        m.id AS m_id, m.name AS m_name, m.profile_image AS m_profile_image,
        ts.style AS ts_style,
        CASE
            WHEN #{loginMemberId} IS NULL THEN 0
            WHEN tpl.trip_plan_id IS NOT NULL THEN 1
            ELSE 0
        END AS is_liked
        FROM (
            SELECT distinct tp.*
            FROM trip_plan tp
            JOIN trip_plan_day tpd ON tp.id = tpd.trip_plan_id
        <where>
                tp.deleted_at IS NULL
                <if test="tripStyle != null">
                    AND EXISTS (
                    SELECT 1 FROM trip_style ts_sub
                    WHERE ts_sub.trip_plan_id = tp.id AND ts_sub.style = #{tripStyle}
                    )
                </if>
                <if test="ranges != null and !ranges.isEmpty()">
                    AND (
                    <foreach collection="ranges" item="range" separator=" OR ">
                        tp.total_days BETWEEN #{range.start} AND #{range.end}
                    </foreach>
                    )
                </if>
                <if test="seasons != null and !seasons.isEmpty()">
                    AND tp.season IN
                    <foreach collection="seasons" item="season" open="(" separator="," close=")">
                        #{season}
                    </foreach>
                </if>
            </where>
        <if test="sort != null">
            ORDER BY tp.${sort} DESC
        </if>
        LIMIT #{size} OFFSET #{offset}
        ) tp
        JOIN member m ON tp.member_id = m.id
        LEFT JOIN trip_style ts ON tp.id = ts.trip_plan_id
        <!-- 로그인한 경우 좋아요 여부 판단 -->
        <if test="loginMemberId != null">
            LEFT JOIN trip_plan_like tpl
            ON tpl.trip_plan_id = tp.id AND tpl.member_id = #{loginMemberId}
            AND tpl.deleted_at IS NULL
        </if>
        <if test="loginMemberId == null">
            LEFT JOIN trip_plan_like tpl
            ON 1=0
        </if>
    </select>

    <select id="countAll">
        SELECT COUNT(DISTINCT tp.id) FROM trip_plan tp
        JOIN member m ON tp.member_id = m.id
        LEFT JOIN trip_style ts ON tp.id = ts.trip_plan_id
        JOIN trip_plan_day tpd ON tp.id = tpd.trip_plan_id
        <where>
            tp.deleted_at IS NULL
            <if test="memberId != null">
                AND tp.member_id = #{memberId}
            </if>
            <if test="tripStyle != null">
                AND ts.style = #{tripStyle}
            </if>
            <if test="ranges != null and !ranges.isEmpty()">
                AND (
                <foreach collection="ranges" item="range" separator=" OR ">
                    tp.total_days BETWEEN #{range.start} AND #{range.end}
                </foreach>
                )
            </if>
            <if test="seasons != null and !seasons.isEmpty()">
                AND tp.season IN
                <foreach collection="seasons" item="season" open="(" separator="," close=")">
                    #{season}
                </foreach>
            </if>
        </where>
    </select>

    <select id="selectAllMine" resultMap="tripSummaryMap">
        SELECT DISTINCT tp.id AS tp_id, tp.created_at, tp.modified_at, tp.deleted_at,
        tp.title as tp_title, tp.description, tp.start_date, tp.end_date
        FROM trip_plan tp
        JOIN member m ON tp.member_id = m.id
        JOIN trip_plan_day tpd ON tp.id = tpd.trip_plan_id
        <where>
            tp.deleted_at IS NULL
            AND tp.member_id = #{memberId}
            <if test="status != null and status.equals('upcoming')">
                AND #{now} &lt; tp.start_date
            </if>
            <if test="status != null and status.equals('ongoing')">
                AND #{now} BETWEEN tp.start_date AND tp.end_date
            </if>
            <if test="status != null and status.equals('completed')">
                AND #{now} &gt; tp.end_date
            </if>

        </where>
        ORDER BY created_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="countAllMine" >
        SELECT count(DISTINCT tp.id)
        FROM trip_plan tp
        JOIN member m ON tp.member_id = m.id
        JOIN trip_plan_day tpd ON tp.id = tpd.trip_plan_id
        <where>
            tp.deleted_at IS NULL
            AND tp.member_id = #{memberId}
            <if test="status != null and status.equals('upcoming')">
                AND #{now} &lt; tp.start_date
            </if>
            <if test="status != null and status.equals('ongoing')">
                AND #{now} BETWEEN tp.start_date AND tp.end_date
            </if>
            <if test="status != null and status.equals('completed')">
                AND #{now} &gt; tp.end_date
            </if>
        </where>
    </select>

    <insert id="insert" parameterType="TripPlan" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO trip_plan
        (
            created_at, modified_at, deleted_at, title, description, start_date, end_date, member_id, like_count, total_days, season
        ) VALUES (
            now(), now(), null, #{title}, #{description}, #{startDate}, #{endDate}, #{memberId}, #{likeCount}, #{totalDays}, #{season}
        )
    </insert>

    <update id="update" parameterType="TripPlan" useGeneratedKeys="true" keyProperty="id">
        UPDATE trip_plan
        SET
            modified_at = now(),
            title = #{title},
            description = #{description}
        WHERE id = #{id}
    </update>

    <update id="delete">
        UPDATE trip_plan
        SET
            deleted_at = now()
        WHERE id = #{id}
    </update>

    <insert id="insertTripStyles">
        INSERT INTO trip_style (trip_plan_id, style)
        VALUES
        <foreach collection="list" item="style" separator=",">
            (#{style.tripPlanId}, #{style.style})
        </foreach>
    </insert>

    <insert id="insertTripPlanDays" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO trip_plan_day (date, day_order, trip_plan_id)
        VALUES
        <foreach collection="list" item="day" separator=",">
            (#{day.date}, #{day.dayOrder}, #{day.tripPlanId})
        </foreach>
    </insert>

    <update id="updateTripPlanDays" parameterType="java.util.List">
        <foreach collection="list" item="day" separator=";">
            UPDATE trip_plan_day
            SET
                date = #{day.date},
                day_order = #{day.dayOrder},
            WHERE id = #{day.id}
        </foreach>
    </update>

    <delete id="deleteTripPlanDays" parameterType="java.util.List">
        DELETE FROM trip_plan_day
        WHERE id IN
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>


    <select id="selectMostLikedId">
        SELECT trip_plan_id
        FROM (
            SELECT trip_plan_id
            FROM trip_plan_like
            WHERE deleted_at IS NULL
            ORDER BY created_at DESC
            LIMIT 100
        ) AS recent_likes
        GROUP BY trip_plan_id
        ORDER BY COUNT(*) DESC
        LIMIT 1;
    </select>

    <update id="updateLikeCount">
        UPDATE trip_plan SET like_count = #{likeCount} WHERE id=#{id}
    </update>

    <update id="updateViewCount">
        UPDATE trip_plan SET view_count = #{viewCount} WHERE id=#{id}
    </update>



    <resultMap id="tripPlanMap" type="TripPlanRecord">
        <id property="id" column="tp_id" />
        <result property="createdAt" column="tp_created_at" />
        <result property="modifiedAt" column="tp_modified_at" />
        <result property="deletedAt" column="tp_deleted_at" />
        <result property="title" column="tp_title" />
        <result property="description" column="tp_description" />
        <result property="startDate" column="tp_start_date" />
        <result property="endDate" column="tp_end_date" />
        <result property="memberId" column="tp_member_id" />
        <result property="likeCount" column="tp_like_count" />
        <result property="viewCount" column="tp_view_count" />
        <result property="isLiked" column="tp_is_liked" />
        <association property="member" resultMap="com.ssafy.trip.domain.member.repository.MemberDao.memberJoinMap"/>
        <collection property="tripPlanDays" ofType="TripPlanDayRecord" javaType="ArrayList" resultMap="tripPlanDayMap" />
        <collection property="tripStyles" ofType="com.ssafy.trip.domain.tripplan.model.enums.TripStyle"
                    column="tp_id"
                    javaType="java.util.ArrayList"
                    resultMap="tripStyleMap"/>
    </resultMap>

    <resultMap id="tripSummaryMap" type="TripPlanRecord">
        <id property="id" column="tp_id" />
        <result property="createdAt" column="created_at" />
        <result property="modifiedAt" column="modified_at" />
        <result property="deletedAt" column="deleted_at" />
        <result property="title" column="tp_title" />
        <result property="description" column="description" />
        <result property="startDate" column="start_date" />
        <result property="endDate" column="end_date" />
        <result property="memberId" column="member_id" />
        <result property="likeCount" column="like_count" />
        <result property="isLiked" column="is_liked" />
    </resultMap>

    <resultMap id="tripStyleMap" type="com.ssafy.trip.domain.tripplan.model.enums.TripStyle">
        <result column="ts_style" javaType="com.ssafy.trip.domain.tripplan.model.enums.TripStyle"/>
    </resultMap>

    <resultMap id="tripPlanDayMap" type="TripPlanDayRecord">
        <id property="id" column="tpd_id" />
        <result property="date" column="tpd_date" />
        <result property="dayOrder" column="tpd_day_order" />
        <result property="tripPlanId" column="tpd_trip_plan_id" />
        <collection property="planItems" ofType="PlanItemRecord" javaType="ArrayList" resultMap="com.ssafy.trip.domain.tripplan.repository.PlanItemDao.planItemMap" />
    </resultMap>
</mapper>